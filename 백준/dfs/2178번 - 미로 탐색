import sys

n, m = map(int,input().split())

graph=[list(map(int,i.rstrip())) for i in sys.stdin.readlines()]
print(graph)

dx =[0,0,1,-1]
dy =[1,-1,0,0]

def bfs(graph,start):
    q = [start]
    graph[0][0]=1
    while q:
        x,y = q.pop(0)
        print(x,y)
        for i in range(4):
            nx = x+dx[i]
            ny = y+dy[i]
            if 0<=nx<n and 0<=ny<m:
                if graph[nx][ny]==1:
                    graph[nx][ny] = graph[x][y] + 1
                    q.append((nx,ny))
    return graph[n-1][m-1]
    
print(bfs(graph,(0,0)))

#dfs로는 못 푼다.
#bfs가 위에서부터 훑어가면서 최단 경로를 보장하므로 
#bfs로 풀고, 각 그래프에 dist를 남긴다.